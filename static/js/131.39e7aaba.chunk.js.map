{"version":3,"file":"static/js/131.39e7aaba.chunk.js","mappings":"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","sources":["components/Contact/Contact.styled.js","components/Contact/Contact.jsx","components/ContactsList/ContactsList.styled.js","redux/contacts/selectors.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/InputForm/InputForm.styled.js","components/InputForm/InputForm.jsx","pages/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.li`\n  font-size: 22px;\n  font-weight: 500;\n  span {\n    margin-right: 15px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Container } from './Contact.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operation';\n\nconst Contact = ({ id, name, phone }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Container>\n      <span className=\"name\">{name} :</span>\n      <span className=\"number\">{phone}</span>\n      <button\n        id={id}\n        onClick={() => {\n          dispatch(deleteContact(id));\n        }}\n      >\n        Delete\n      </button>\n    </Container>\n  );\n};\n\nexport default Contact;\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  phone: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.ul`\n  display: flex;\n  flex-direction: column;\n  row-gap: 10px;\n  margin-left: 25px;\n`;\n","export const getContacts = state => state.contacts.items;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getFilter = state => state.filter;\n","import Contact from 'components/Contact/Contact';\nimport { Container } from './ContactsList.styled';\nimport { useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\n\nconst ContactsList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const filtredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLocaleLowerCase())\n  );\n  return (\n    <Container>\n      {filtredContacts.map(({ id, name, number }) => {\n        return (\n          <Contact key={id} id={id} name={name} phone={number} />\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default ContactsList;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  input {\n    display: block;\n    padding: 4px 8px;\n    height: 20px;\n    margin-bottom: 15px;\n    font-size: 16px;\n    padding: 4px 8px;\n    border-radius: 4px;\n    :active,\n    :focus {\n      outline-color: #3b8396;\n    }\n  }\n  label {\n    display: block;\n    margin-bottom: 10px;\n    font-size: 22px;\n    font-weight: 500;\n  }\n`;\n","import { Container } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { getFilter } from 'redux/contacts/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterString = useSelector(getFilter);\n\n  return (\n    <Container>\n      <label htmlFor=\"filter\">Find contacts by name</label>\n      <input\n        type=\"text\"\n        id=\"filter\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={filterString}\n        onChange={e => {\n          dispatch(setFilter(e.target.value));\n        }}\n      />\n    </Container>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  width: 400px;\n  height: 250px;\n  padding: 16px;\n  margin-bottom: 20px;\n  display: flex;\n  flex-direction: column;\n  border: 1px solid black;\n  label {\n    margin-bottom: 10px;\n    font-size: 22px;\n    font-weight: 500;\n  }\n  input {\n    padding: 4px 8px;\n    height: 30px;\n    max-width: 300px;\n    font-size: 16px;\n    margin-bottom: 20px;\n    border-radius: 4px;\n    :active,\n    :focus {\n      outline-color: #3b8396;\n    }\n  }\n  button {\n    max-width: fit-content;\n    padding: 8px 16px;\n    margin-top: auto;\n    font-size: 16px;\n    font-weight: 600;\n    background-color: #72cccc;\n    border-radius: 4px;\n  }\n`;\n","import { useState } from 'react';\nimport { Form } from './InputForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operation';\nimport { getContacts } from 'redux/contacts/selectors';\n\nconst InputForm = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const contacts = useSelector(getContacts);\n\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setPhone(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (\n      contacts.some(\n        item => item.name.toLocaleLowerCase() === name.toLocaleLowerCase()\n      )\n    ) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    const newContact = {\n      name,\n      number: phone,\n    };\n    dispatch(addContact(newContact));\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <label htmlFor=\"name\">Name</label>\n      <input\n        type=\"text\"\n        id=\"name\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={handleChange}\n        value={name}\n      />\n      <label htmlFor=\"tel\">Phone Number</label>\n      <input\n        type=\"tel\"\n        id=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        onChange={handleChange}\n        value={phone}\n      />\n      <button type=\"submit\">Add contact</button>\n    </Form>\n  );\n};\n\nexport default InputForm;\n","import ContactsList from 'components/ContactsList/ContactsList';\nimport Filter from 'components/Filter/Filter';\nimport InputForm from 'components/InputForm/InputForm';\n\nconst Contacts = () => {\n  return (\n    <>\n      <InputForm />\n      <Filter />\n      <ContactsList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["Container","styled","id","name","phone","dispatch","useDispatch","className","onClick","deleteContact","getContacts","state","contacts","items","getFilter","filter","useSelector","filtredContacts","contact","toLowerCase","includes","toLocaleLowerCase","map","number","filterString","htmlFor","type","pattern","title","required","value","onChange","e","setFilter","target","Form","useState","setName","setPhone","handleChange","onSubmit","preventDefault","some","item","alert","newContact","addContact"],"sourceRoot":""}